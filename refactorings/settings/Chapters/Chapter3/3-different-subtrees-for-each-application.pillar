!! Different subtrees for each application

In ==EDASettings== we need to build subtrees dynamically, based on the already registered applications.
We can create a new entry using the ""group:"" method of the ==SettingTreeBuilder== that is passed to the ==<systemsettings>==-tagged method: ==aBuilder group: #subtreeSymbol==

We need to ensure ==#subtreeSymbol== is unique. Otherwise the subtree will be created under an existing entry.

Let's remove the current ==<systemsettings>== pragma of ==EDASettings class>>edaSettingsOn:== and rename it to ==EDASettings class>>edaSettingsOn: aBuilder for: anEDAApplication under: aSymbol==, and let's write a new ==EDASettings class>>edaSettingsOn:== from scratch.

Since we haven't created (or registered) any application yet, we can choose either to skip creating anything, or display a message.

% ${changes:code/001-EDASettings_class_edaSettingsOn_.ombu}$
[[[methodDefinition=true|lineNumber=true
EDASettings class >> edaSettingsOn: aBuilder
  <systemsettings>
  | root rootSymbol |
  rootSymbol := #edaApps.
  root := aBuilder group: rootSymbol.
  EDAApplications uniqueInstance edaApplications
    ifEmpty: [
      root
        label: 'No PharoEDA applications' translated;
        description: 'No PharoEDA applications registered' ]
    ifNotEmpty: [ :apps |
      root
        label: 'PharoEDA application(s)' translated , ': '
               , apps size printString translated;
        description: 'Registered PharoEDA applications';
        noOrdering.
      apps do: [ :app |
        self edaSettingsOn: aBuilder for: app under: rootSymbol
      ]
    ]
]]]

However, the old ""edaSettings:"" method used a fixed symbol to place the application settings in the tree. Let's fix that. We'll start with the ==environmentSettingsOn:under:on:==. The rest of the methods will be fixed later.

% ${changes:code/002-EDASettings_class_edaSettingsOn_for_under_.ombu}$
[[[methodDefinition=true|lineNumber=true
EDASettings class >> edaSettingsOn: aBuilder for: anEDAApplication under: aSymbol
  | parent parentGroup |
  parent := anEDAApplication applicationName.
  parentGroup := aBuilder group: parent.
  parentGroup
    label: parent translated;
    parent: aSymbol;
    description: parent;
    noOrdering.
  self
    environmentSettingsOn: aBuilder
    under: parent
    on: anEDAApplication
]]]

As you can see, we've renamed the previous method from ""environmentSettingsOn: aBuilder under: aSymbol"" to ""environmentSettingsOn: aBuilder: under: aSymbol on: anEDAApplication"". To display and manage each application's settings, we need the application instance. Previously, we used class-scoped attributes of predefined classes as settings. Now we're going to access them through the application instance itself.
We need to create the ==config/== folder and two files (""development.json"" and ""integration-tests.json"")  with an initial empty json file (=={}==) in them.

Additionally, we'll comment some settings code in ==EDATestSettings== class as well. We'll deal with it later.

% ${changes:code/003-EDATestSettings_class_edaTestSettingsOn_.ombu}$
[[[methodDefinition=true|lineNumber=true
EDATestSettings class >> edaTestSettingsOn: aBuilder
  <systemsettings>
  (aBuilder group: #edatests)
    label: 'EDA Tests' translated;
    description: 'EDA tests';
    noOrdering;
    parent: #eda
]]]
We might just add the settings as instance attributes of the ==EDAApplication== itself. Such solution would not be flexible enough.
